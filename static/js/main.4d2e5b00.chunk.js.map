{"version":3,"sources":["App.js","Gameboard.js","actions.js","reducer.js","serviceWorker.js","index.js"],"names":["Gameboard","checkBoard","_this","props","drop","columns","i","x","console","log","y","game_board","winner","stopGame","handleClick","start_game","alert","board","this","col","rows","activeClass","undefined","react_default","a","createElement","className","onClick","Component","connect","state","current_ply","current_player","active_game","gameBoard","dispatch","type","payload","dropToken","startGame","cells","row","push","src_Gameboard","key","App","start","event","preventDefault","begin","checkWin","initialState","Boolean","window","location","hostname","match","store","createStore","arguments","length","action","Object","objectSpread","token","column","concat","slice","applyMiddleware","thunk","logger","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d2e5b00.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { startGame } from './actions';\nimport { connect } from 'react-redux';\nimport Gameboard from './Gameboard';\nimport './App.css';\n\n\n  // 7 col 6 row\n  const cells = [] //6 rows\n\n  for (let y = 5; y >= 0; y--) {\n    const row = [] // will make 6 rows\n\n    for (let x = 0; x < 7; x++) { // will make 7 columns\n      row.push(<Gameboard  key= {x} columns={x} rows={y}/>)\n      console.log(`colmun length`, row)  //outputs 7\n    }\n\n    cells.push(<div className='row' key={y}>{row}</div>) \n  }\n  console.log(`row length`, cells) //outputs 6\n\n\nclass App extends Component  {\n  \n  start = event => {\n    console.log(`starting game, `, this.props.Gameboard)\n    event.preventDefault()\n    this.props.begin()\n    this.checkWin(this.props.Gameboard)\n}\n\n\n  render () {\n    console.log(`is game active`, this.props.start_game)\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={this.props.begin}> Start Game </button>\n        <p>Game Active: {this.props.start_game ? 'True' : 'False'}</p>\n        <p> The Current Player is: Player {this.props.current_ply}</p>\n        <p>Winner: Player {this.props.winner}</p>\n      </header>\n      {cells}\n    </div>\n  )}\n}\n\nconst mapStateToProps = state => {\n  console.log(state, 'app state')\n  return {\n      current_ply: state.current_player,\n      winner: state.winner,\n      start_game: state.active_game,\n      game_board: state.gameBoard\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    \n      begin: () => dispatch(startGame())\n  }\n}\nexport default connect( mapStateToProps, mapDispatchToProps )(App);\n","import React, { Component } from 'react';\nimport { dropToken, startGame, stopGame } from './actions';\nimport { connect } from 'react-redux';\nimport './App.css';\n\nclass Gameboard extends Component  {\n\n   checkBoard = () => {\n        this.props.drop(this.props.columns)\n        //top to bottom\n         for (let i = 1; i<= 2; i++) {\n            // console.log(this.props.game_board, 'win board')\n            for ( let x = 0; x<= 3; x++) {\n                console.log(x, 'current player')\n                for ( let y = 0; y<=6; y++) {\n                    if(this.props.game_board[y][x] === i) {\n                        if(this.props.game_board[y][x + 1] === i && this.props.game_board[y][x + 2] === i && this.props.game_board[y][x + 3] === i) {\n                            let winner = i;\n                           \n                            console.log( 'winner is: ', winner)\n                            this.props.stopGame(winner)\n                            return \n                        }\n                    }\n                }\n            }\n         }\n        \n         //horizontal\n         for (let i = 1; i<= 2; i++) {\n            console.log(this.props.game_board, 'win board')\n            for ( let x = 0; x<= 6; x++) {\n                console.log(i, 'player')\n                for ( let y = 0; y<=2; y++) {\n                    if(this.props.game_board[y][x] === i) {\n                        if(this.props.game_board[y + 1][x] === i && this.props.game_board[y + 2][x] === 1 && this.props.game_board[y + 3][x] === i) {\n                            let winner = i\n                            console.log( 'winner is: ', winner)\n                            this.props.stopGame(winner)\n                            return \n                        }\n                    }\n                }\n            }\n         }\n    }\n   \n    handleClick = () => {\n         if(this.props.start_game) {\n            this.checkBoard(this.props.game_board)\n         } else {\n             alert('Please Start Game')\n         }\n      \n    }\n\n    \n    render () {\n        // console.log(`props`, this.props)\n        const board = this.props.game_board\n        const col = this.props.columns\n        const rows = this.props.rows\n\n        let activeClass = 'board'\n        if(board[col][rows] !== undefined) {\n            if(board[col][rows] === 1) {\n                activeClass += ' player_1'\n            } else {\n                activeClass += ' player_2'\n            }\n        }\n       \n        return (\n            <div className={activeClass} onClick={this.handleClick}></div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        current_ply: state.current_player,\n        winner: state.winner,\n        start_game: state.active_game,\n        game_board: state.gameBoard\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        drop: col => dispatch(dropToken(col)),\n        startGame: () => dispatch(startGame()),\n        stopGame: winner => dispatch(stopGame(winner))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Gameboard)","export const DROP_TOKEN = 'DROP_TOKEN';\nexport const GAME_START = 'GAME_START';\nexport const CURRENT_PLAYER = 'CURRENT_PLAYER';\nexport const WINNER_START = 'WINNER_START';\nexport const WINNER_FOUND = 'WINNER_FOUND';\n\nexport const startGame = () =>  dispatch => {\n    dispatch( {\n        type: 'GAME_START',\n        payload: true\n    })\n}\n\nexport const dropToken = col => {\n    console.log('in actions')\n   return { \n        type: 'DROP_TOKEN',\n        payload: col\n    }; \n}\n\nexport const stopGame = winner => dispatch =>  {\n    dispatch({\n        type: 'WINNER_START'\n    })\n    dispatch({\n        type: 'WINNER_FOUND',\n        payload: winner\n    })\n}","import { DROP_TOKEN, GAME_START, WINNER_START, WINNER_FOUND} from './actions.js'\nconst initialState = {\n    active_game: false,\n    current_player: 1,\n    winner: '',\n    gameBoard: [\n        [], // these are the column the token fills in lowest disc. inside each columns theres an item for the row\n        [],\n        [], //  [red [ yell  [yell\n        [], //   yell  red    yell\n        [], //   red   red    yell\n        [], //   red]  yell]  yell]\n        []\n    ]\n}\n\nexport default (state = initialState, action) => {\n    switch(action.type) {\n        case GAME_START: \n        console.log(' game active:', action.payload)\n            return {\n                ...state,\n                active_game: action.payload\n            }\n        case DROP_TOKEN:\n        console.log(' column:', action.payload)\n                const token = state.current_player\n                const column = state.gameBoard[action.payload].concat(token)\n                const gameBoard = state.gameBoard.slice()\n                gameBoard[action.payload] = column\n            return {\n                ...state,\n                current_player: state.current_player === 1 ? 2 : 1,\n                gameBoard: gameBoard\n            };\n\n        case WINNER_START: \n            return {\n                ...state\n            }\n        case WINNER_FOUND:\n            return {\n                ...state,\n                winner: action.payload,\n                active_game: false\n            } \n        default: \n            return state \n    }\n\n}\n\n// current player\n// gameboard\n// 7 col 6 row\n// active game\n// winner","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport logger from \"redux-logger\";\nimport reducer from './reducer';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer, applyMiddleware(thunk, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n         <App />\n    </Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}