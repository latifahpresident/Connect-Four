{"version":3,"sources":["App.js","Gameboard.js","actions.js","reducer.js","serviceWorker.js","index.js"],"names":["Gameboard","handleClick","console","log","_this","props","columns","drop","react_default","a","createElement","className","onClick","this","rows","Component","connect","state","current_ply","current_player","winner","start_game","active_game","dispatch","col","type","payload","dropToken","startGame","row","y","x","push","src_Gameboard","App","start","event","preventDefault","begin","initialState","gameBoard","Boolean","window","location","hostname","match","store","createStore","arguments","length","undefined","action","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21c07be7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { startGame } from './actions';\nimport { connect } from 'react-redux';\nimport Gameboard from './Gameboard';\nimport './App.css';\n\n\n  // 7 col 6 row\n  const row = [] //6 rows\n\n  for (let y = 6; y >= 0; y--) {\n    const col = [] // will make 6 rows\n\n    for (let x = 0; x < 7; x++) { // will make 7 columns\n      col.push(<Gameboard columns={x} rows={y}/>)\n      console.log(`colmun length`, col)  //outputs 7\n    }\n\n    row.push(<div className='row'>{col}</div>) \n  }\n  console.log(`row length`, row) //outputs 6\n\n\nclass App extends Component  {\n  \n  start = event => {\n    console.log(`starting game`)\n    event.preventDefault()\n    this.props.begin()\n}\n  render () {\n    console.log(`is game active`, this.props.start_game)\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <button onClick={this.start}> Start Game </button>\n        <p>Game Active: {this.props.start_game }</p>\n        <p> The Current Player is: Player {this.props.current_ply}</p>\n       \n      </header>\n      <div className='rows'>\n      {row}\n      </div>\n     \n    </div>\n  )}\n}\n\nconst mapStateToProps = state => {\n  return {\n      current_ply: state.current_player,\n      winner: state.winner,\n      start_game: state.active_game\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    \n      begin: () => dispatch(startGame())\n  }\n}\nexport default connect( mapStateToProps, mapDispatchToProps )( App);\n","import React, { Component } from 'react';\nimport { dropToken, startGame } from './actions';\nimport { connect } from 'react-redux';\nimport './App.css';\n\nclass Gameboard extends Component  {\n\n    handleClick = () => {\n        console.log(`click column:`, this.props.columns) //telling me which col was click\n      this.props.drop(this.props.columns)\n    }\n\n    \n    render () {\n        return (\n            <div className='board' onClick={this.handleClick}>\n                <p>column: {this.props.columns}, <br/> row: {this.props.rows} </p>      \n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        current_ply: state.current_player,\n        winner: state.winner,\n        start_game: state.active_game\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        drop: col => dispatch(dropToken(col)),\n        startGame: () => dispatch(startGame())\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Gameboard)","export const DROP_TOKEN = 'DROP_TOKEN';\nexport const GAME_START = 'GAME_START';\nexport const CURRENT_PLAYER = 'CURRENT_PLAYER';\n\nexport const startGame = () =>  dispatch => {\n    dispatch( {\n        type: 'GAME_START',\n       \n    })\n    dispatch({\n        type: 'CURRENT_PLAYER',\n        payload: 1\n    })\n}\n\nexport const dropToken = col => {\n    console.log('in actions')\n   return { \n        type: 'DROP_TOKEN',\n        payload: col\n    }; \n}","import { DROP_TOKEN, GAME_START , CURRENT_PLAYER} from './actions.js'\nconst initialState = {\n    active_game: false,\n    current_player: 1,\n    winner: '',\n    \n    gameBoard: [\n        [], // these are the column the token fills in lowest disc. inside each columns theres an item for the row\n        [],\n        [], //  [red [ yell  [yell\n        [], //   yell  red    yell\n        [], //   red   red    yell\n        [], //   red]  yell]  yell]\n        []\n    ]\n}\n\nexport default (state = initialState, action) => {\n    console.log(' game active:', action.payload)\n\n    switch(action.type) {\n        case GAME_START: \n            return {\n               \n                active_game: !state.active_game\n            }\n        case CURRENT_PLAYER:\n            return {\n                current_player: action.payload\n            }\n        case DROP_TOKEN:\n\n            return {\n                current_player: state.current_player === 1 ? 2 : 1\n            };\n\n        default: \n            return state\n            \n    }\n\n}\n\n// current player\n// gameboard\n// 7 col 6 row\n// active game\n// winner","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nReactDOM.render(\n    <Provider store={store}>\n         <App />\n    </Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}